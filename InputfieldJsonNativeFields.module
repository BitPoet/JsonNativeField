<?php


class InputfieldJsonNativeFields extends Inputfield implements Module {
	public static function getModuleInfo() {
		return array(
			"title"				=>	"Inputfield Json Native Fields",
			"summary"			=>	"Stores multiple searchable key-value-pairs in a JSON field",
			"version"			=>	"0.0.1",
			"installs"			=>	array("FieldtypeJsonNative"),
		);
	}
	
	public function init() {

		$textfield = $this->modules->get("InputfieldText");
		$textfield->attr('size', 40);
		
		$intfield = $this->modules->get("InputfieldInteger");
		
		$datefield = $this->modules->get("InputfieldDatetime");
		$datefield->datepicker = 2;
		$datefield->dateOutputFormat = $datefield->dateInputFormat = 'Y-m-d';
		$datefield->addClass('InputfieldDatetimeDatepicker3');
		
		$dtfield = $this->modules->get("InputfieldDatetime");
		$dtfield->datepicker = 1;
		$dtfield->dateOutputFormat = $dtfield->dateInputFormat = 'Y-m-d';
		$dtfield->timeOutputFormat = $dtfield->timeInputFormat = 'H:i';
		$dtfield->addClass('InputfieldDatetimeDatepicker3');
		
		$selfield = $this->modules->get("InputfieldSelect");
		$selfield->addOptions(array(
			"text"			=>	$this->_("Text"),
			"integer"		=>	$this->_("Integer"),
			"date"			=>	$this->_("Date"),
			"datetime"		=>	$this->_("Date and Time")
		));
		
		$this->config->js("jsonnative", array(
			"text"			=>	$textfield->render(),
			"integer"		=>	$intfield->render(),
			"date"			=>	$datefield->render(),
			"datetime"		=>	$dtfield->render(),
			"typeselect"	=>	$selfield->render(),
			"messages"		=>	array(
				"name_not_empty"	=>	$this->_("Name must not be empty for new field"),
				"name_exists"		=>	$this->_("A field with this name already exists")
			)
		));

		parent::init();
	}
	
	public function renderReady(Inputfield $parent = null, $renderValueMode = false) {
		// Make sure that Datetime style and script are loaded:
		$f = $this->modules->get("InputfieldDatetime");
		$f->renderReady($parent, $renderValueMode);
		
		parent::renderReady($parent, $renderValueMode);
	}
	
	public function ___render() {
		$value = $this->attr('value') ?: new JsonData();
		
		$name = $this->attr('name');

		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		
		$tbl->headerRow(array(
			$this->_("Field"),
			$this->_("Type"),
			$this->_("Value"),
			$this->_("Delete")
		));
		
		$data = $value->getArray();
		
		$n = 1;
		
		$tbl->row(array(
			$this->_("Note: Name must be unique"),
			"",
			$this->_("Value can hold any content"),
			""
		));
		
		$trashbtn = "<a class='InputfieldJsonNativeDelete' href='#'><li class='fa fa-trash'> " . $this->_("Delete") . "</a>";

		foreach($data as $k => $v) {
			$inpName = $this->modules->get("InputfieldText");
			$inpName->addClass("InputfieldJsonNativeMonitor InputfieldJsonNativeName");
			$inpName->size = 40;
			$inpName->attr('id+name', "{$this->id}_name_$n");
			$inpName->attr('value',$this->sanitizer->entities1($k));
			
			$selfield = $this->modules->get("InputfieldSelect");
			$selfield->addClass("InputfieldJsonNativeType");
			$selfield->addOptions(array(
				"text"			=>	$this->_("Text"),
				"integer"		=>	$this->_("Integer"),
				"date"			=>	$this->_("Date"),
				"datetime"		=>	$this->_("Date and Time")
			));
			$selfield->attr('data-idsuffix', $n);
			$selfield->attr('data-idprefix', $this->name);
			$selfield->attr('id+name', "{$this->id}_value_$n");
			$selfield->attr('value', 'text');

			$inpValue = $this->modules->get("InputfieldText");
			$inpValue->addClass("InputfieldJsonNativeMonitor InputfieldJsonNativeValue");
			$inpValue->size = 40;
			$inpValue->attr('id+name', "{$this->id}_value_$n");
			$inpValue->attr('value',$this->sanitizer->entities1($v));

			$tbl->row(array(
				$inpName->render(),
				$selfield->render(),
				$inpValue->render(),
				$trashbtn
			));
			
			$n++;
		}

		$fs = $this->modules->get("InputfieldFieldset");
		$fs->title = $this->_("New Entry");
		
		$inpName = $this->modules->get("InputfieldText");
		$inpName->addClass("InputfieldJsonNativeName");
		$inpName->label = $this->_("Name of new field");
		$inpName->columnWidth = 33;
		$inpName->size = 40;
		$inpName->attr('name+id', "{$this->id}_name_new");
		$inpName->attr('value', '');
		$fs->append($inpName);
		
		$selfield = $this->modules->get("InputfieldSelect");
		$selfield->addClass("InputfieldJsonNativeType");
		$selfield->label = $this->_("Type of new field");
		$selfield->columnWidth = 33;
		$selfield->addOptions(array(
			"text"			=>	$this->_("Text"),
			"integer"		=>	$this->_("Integer"),
			"date"			=>	$this->_("Date"),
			"datetime"		=>	$this->_("Date and Time")
		));
		$selfield->attr('data-idsuffix', "new");
		$selfield->attr('data-idprefix', $this->id);
		$selfield->attr('name+id', "{$this->id}_type_new");
		$selfield->attr('value', 'text');
		$fs->append($selfield);
		
		$inpValue = $this->modules->get("InputfieldText");
		$inpValue->addClass("InputfieldJsonNativeValue");
		$inpValue->label = $this->_("Value for new field (may be empty)");
		$inpValue->columnWidth = 34;
		$inpValue->size = 40;
		$inpValue->attr('name+id', "{$this->id}_value_new");
		$inpValue->attr('value', '');
		$fs->append($inpValue);

		$btn = $this->modules->get("InputfieldButton");
		$btn->addClass('fa fa-circle-plus');
		$btn->addClass("InputfieldJsonNativeAdd");
		$btn->attr('value', $this->_("Add"));
		$fs->append($btn);
		
		$out = "<div class='InputfieldWrapper InputfieldJsonNativeWrap' data-id='{$this->id}' data-name='{$this->name}'>\n" .
			   $tbl->render() . "\n" .
			   $fs->render() . "\n" .
			   "<input type='hidden' id='{$this->id}' name='{$this->id}' value='" . $this->sanitizer->entities($value->getJson()) . "'>\n" .
			   "</div>\n"
		;
		
		return $out;
	}
	
}
