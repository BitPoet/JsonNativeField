<?php namespace ProcessWire;


class FieldtypeJsonNative extends Fieldtype implements Module {
	public static function getModuleInfo() {
		return array(
			"title"				=>	"Fieldtype Json Native",
			"summary"			=>	"Fieldtype utilizing native MySQL support for JSON columns. Will be installed automatically when InputfieldJsonNativeFields is installed.",
			"version"			=>	"0.0.5",
		);
	}
	
	public function getBlankValue(Page $page, Field $field) {
		return new JNJsonData();
	}
	
	public function ___wakeupValue(Page $page, Field $field, $value) {
		if($value instanceof JNJsonData) return $value;
		return new JNJsonData((string)$value);
	}

	public function ___sleepValue(Page $page, Field $field, $value) {
		return $value->getJson();
	}

	public function sanitizeValue(Page $page, Field $field, $value) {
		if(! $value instanceof JNJsonData) $value = new JNJsonData((string)$value);
		return $value;
	}

	public function ___exportValue(Page $page, Field $field, $value, array $options = array()) {
		if($value instanceof JNJsonData) $value = $value->getJson();
		return $value; 
	}

	/**
	 * Format the value for output, according to selected format and language
	 *
	 */
	public function ___formatValue(Page $page, Field $field, $value) {
		if($value instanceof JNJsonData) $value = $value->getJson();
		return $value;
	}

	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		$database = $this->wire("database");

		if(empty($subfield) || $subfield == "data") {
			$path = '$.*.value';
		} else {
			$path = '$.' . $subfield . ".value";
		}

		$table = $database->escapeTable($table);
		$value = $database->escapeStr($value);
		if($operator == "=") {
			$query->where("JSON_SEARCH({$table}.data, 'one', '$value', NULL, '$path') IS NOT NULL");			
		} else if($operator == "*=" || $operator == "%=") {
			$query->where("JSON_SEARCH({$table}.data, 'one', '%$value%', NULL, '$path') IS NOT NULL");			
		} else if($operator == "^=") {
			$query->where("JSON_SEARCH({$table}.data, 'one', '$value%', NULL, '$path') IS NOT NULL");			
		} else if($operator == "$=") {
			$query->where("JSON_SEARCH({$table}.data, 'one', '%$value', NULL, '$path') IS NOT NULL");			
		}

		return $query; 
	}

	
	public function getDatabaseSchema(Field $field) {
		$engine = "InnoDB"; 
		$charset = $this->wire('config')->dbCharset;
		$schema = array(
			'pages_id' => 'int UNSIGNED NOT NULL', 
			'data' => "JSON", // each Fieldtype should override this in particular
			'keys' => array(
				'primary' => 'PRIMARY KEY (`pages_id`)',
			),
			// additional data 
			'xtra' => array(
				// any optional statements that should follow after the closing paren (i.e. engine, default charset, etc)
				'append' => "ENGINE=$engine DEFAULT CHARSET=$charset", 
				
				// true (default) if this schema provides all storage for this fieldtype.
				// false if other storage is involved with this fieldtype, beyond this schema (like repeaters, PageTable, etc.)
				'all' => true, 
			)
		); 
		return $schema; 
	}

    public function getInputfield(Page $page, Field $field) {
        $inputField = $this->modules->get('InputfieldJsonNativeFields');
        return $inputField;
    }
	
	public function install() {
		$dbver = $this->database->getAttribute(\PDO::ATTR_SERVER_VERSION);
		if(version_compare($dbver, '5.7.8', '<')) {
			throw new WireException(sprintf($this->_("MySQL Server version needs to be at least 5.7.8 for fully working JSON support, installed version is %s"), $dbver));
		}
	}
}


class JNJsonData extends WireData {
	public function __construct($value = NULL) {
		parent::__construct();
		if($value !== NULL) {
			try {
				$vals = json_decode($value);
				foreach($vals as $k => $v) {
					if(is_object($v)) {
						if(!property_exists($v, "type") || empty($v->type)) {
							$v->type = "text";
						}
						$this->set($k, new JNJsonValue($v->type, $v->value));
					} else {
						$this->set($k, new JNJsonValue("text", $v));
					}
				}
			} catch(Exception $e) {
				// JSON parsing failed. Do nothing for now.
			}
		}
	}
	
	/**
	 * Set or add a field with the given name
	 *
	 * ~~~
	 * // Value is string, generates a text field:
	 * $page->nativeField->set("myfield1", "some text in this field");
	 *
	 * // Value is an array, first element is the type, second is the value
	 * $page->nativeField->set("myfield2", ["integer", 1234]);
	 *
	 * // Value is a JNJsonValue object
	 * $page->nativeField->set("myfield3", new JNJsonValue("datetime", time()));
	 *
	 * // Remove a field
	 * $page->nativeField->set("myfield2", null);
	 *
	 * // Set multiple fields at once
	 * $page->nativeFields->set([
	 * 	"myfield1"	=>	["text", "first field content"],
	 * 	"myfield2"	=>	["float", 3.141592687],
	 * 	"myfield3"	=>	new JNJsonValue("datetime", time() + 7200)
	 * ]);
	 * ~~~
	 *
	 * @param string $key The field name
	 * @param string|array|JNJsonValue|null $value
	 */
	public function set($key, $value = null) {
		if($key == 'data') {
			if(!is_array($value)) $value = (array) $value;
			return $this->setArray($this->removeIllegalKeywords($value));
		}
		
		if(is_array($key)) {
			foreach($key as $k => $v) {
				$this->set($k, $v);
			}
			return $this;
		}
		
		if(! $value instanceof JNJsonValue) {
			$val = new JNJsonValue();
			if(is_array($value)) {
				$val->value = $value[1];
				$val->type = $value[0];
			} else {
				$val->value = $value;
				$val->type = "text";
			}
			$value = $val;
		}
		$v = isset($this->data[$key]) ? $this->data[$key] : null;
		if(!$this->isEqual($key, $v, $value)) $this->trackChange($key, $v, $value); 
		$this->data[$key] = $value; 
		return $this; 
	}

	public function remove($key) {
		if(!isset($this->data[$key]))
			return $this;
		
		$this->trackChange($key, $this->data[$key], null);
		unset($this->data[$key]);
		return $this;
	}

	public function removeIllegalKeywords($inp) {
		foreach(arry_keys($inp) as $k) {
			if(array_key_exists($k, self::$illegalKeywords)) unset($inp[$k]);
		}
		return $inp;
	}
	
	protected function isEqual($key, $value1, $value2) {
		if($key) {}
		return json_encode($value1) === json_encode($value2);
	}
	
	public function getJson() {
		return json_encode($this->getArray(), JSON_FORCE_OBJECT);
	}
	
	public function __toString() {
		return $this->getJson();
	}
}

class JNJsonValue {
	public $value;
	public $type;
	
	public function __construct($type = "text", $value = null) {
		$this->type = $type;
		$this->value = $value;
	}
	
	public function __toString() {
		return $this->value;
	}
}